// Project Properties
version = "6.6.1" // supported Millennial version

apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.1'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName version
        consumerProguardFiles 'proguard-project.txt'
    }

    sourceSets {
        main.manifest.srcFile 'AndroidManifest.xml'
        main.java.srcDir 'src'
        main.res.srcDir 'res'
        main.assets.srcDir 'assets'
        main.resources.srcDir 'src'
    }

    lintOptions {
        abortOnError false
    }

}

ext {
    pom_google_play_services_version = "8.4.0"
}

repositories {
    mavenCentral()

        maven {
            url 'http://cdn.adnxs.com/anx-sdk/maven'
        }
}

dependencies {
    compile project(':sdk')
    compile ("com.millennialmedia:android:$version@aar")
    // MM crashes the app if the right google play services package is not present in the app
    // To reduce pain in the the MM building from source integration, adding the dependencies here
    compile("com.google.android.gms:play-services-base:$project.pom_google_play_services_version") {
        transitive = false
    }
    compile("com.google.android.gms:play-services-ads:$project.pom_google_play_services_version") {
        transitive = false
    }
}

/**
 * Maven distribution
 */
// create a gradle.properties file and assign the following properties for the script to use your credentials
//nexusUsername=
//nexusPassword=
//nexusRepositoryUrl=
//nexusRepositoryUrlReleases= //optional
//nexusRepositoryUrlSnapshots= // optional
// To release the sdk to maven, please run
// gradle clean assembleRelease publishMillennialPublicationToMavenRepository
// Can alternatively pass the parameters from command line using -PcustomProp=myProp

//apply plugin: 'maven-publish'
evaluationDependsOn(':sdk')
ext {
    pom_name = "AppNexus Android SDK: Millennial Media Mediation Adapter"
    pom_description = "AppNexus's Android Advertising Libraries: Mediation adapter for Millennial Media"
    pom_url = "https://wiki.appnexus.com/display/sdk/Mobile+SDKs?src=search#MobileSDKs-Android"

    pom_groupId = "com.appnexus.opensdk.mediatedviews"
    pom_artifactId = "appnexus-millennialmedia-mediation"
    pom_packaging = "aar"
    pom_version = project(':sdk').version + "-" + project.version

    pom_distribution_snapshotRepo_id = "ossrh"
    pom_distribution_snapshotRepo_url = "https://oss.sonatype.org/content/repositories/snapshots"
    pom_distribution_repo_id = "ossrh"
    pom_distribution_repo_url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

    username =project.hasProperty('nexusUsername') ? project.getProperties().get('nexusUsername') : "Replace your username here"
    password = project.hasProperty('nexusPassword') ? project.getProperties().get('nexusPassword') : "Replace your password here"
}

/*publishing {
    publications {
        millennial(MavenPublication) {
            groupId project.pom_groupId
            artifactId project.pom_artifactId
            version project(':sdk').version + "-" + project.version
            artifact("${project.buildDir}/outputs/aar/${project.name}-release.aar")

            pom.withXml {
                asNode().appendNode('description',
                        project.pom_description)
                asNode().appendNode('name',
                        project.pom_name)
                asNode().appendNode('url', project.pom_url)
                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('connection', project(':sdk').pom_scm_connection)
                scmNode.appendNode('developerConnection', project(':sdk').pom_scm_developerConnection)
                scmNode.appendNode('url', project(':sdk').pom_scm_url)
                def licencesNode = asNode().appendNode('licenses')
                def licenseNode = licencesNode.appendNode('license')
                licenseNode.appendNode('name', project(':sdk').pom_license_name)
                licenseNode.appendNode('url', project(':sdk').pom_license_url)
                def developersNode = asNode().appendNode('developers')
                def developerNode = developersNode.appendNode('developer')
                developerNode.appendNode('name', project(':sdk').pom_developer_name)
                developerNode.appendNode('email', project(':sdk').pom_developer_email)
                developerNode.appendNode('organization', project(':sdk').pom_developer_organization)
                developerNode.appendNode('organizationUrl', project(':sdk').pom_developer_organizationUrl)
                def dependenciesNode = asNode().appendNode('dependencies')
                def sdkDependencyNode = dependenciesNode.appendNode('dependency')
                sdkDependencyNode.appendNode('groupId', project(':sdk').pom_groupId)
                sdkDependencyNode.appendNode('artifactId', project(':sdk').pom_artifactId)
                sdkDependencyNode.appendNode('version', project(':sdk').version)
                sdkDependencyNode.appendNode('scope', 'compile')
                sdkDependencyNode.appendNode('type', project(':sdk').pom_packaging)
                // MM crashes the app if the right google play services package is not present in the app
                // To reduce pain in the the MM maven integration, adding the dependencies here
                def googleAdsDependencyNode = dependenciesNode.appendNode('dependency')
                googleAdsDependencyNode.appendNode('groupId', 'com.google.android.gms')
                googleAdsDependencyNode.appendNode('artifactId', 'play-services-ads')
                googleAdsDependencyNode.appendNode('version', project.pom_google_play_services_version)
                googleAdsDependencyNode.appendNode('type', 'aar')
                def googleBaseDependencyNode = dependenciesNode.appendNode('dependency')
                googleBaseDependencyNode.appendNode('groupId', 'com.google.android.gms')
                googleBaseDependencyNode.appendNode('artifactId', 'play-services-base')
                googleBaseDependencyNode.appendNode('version', project.pom_google_play_services_version)
                googleBaseDependencyNode.appendNode('type', 'aar')
            }
        }
    }
    repositories {
        maven {
            credentials {
                username project.hasProperty('nexusUsername') ? project.getProperties().get('nexusUsername') : "Replace your username here"
                password project.hasProperty('nexusPassword') ? project.getProperties().get('nexusPassword') : "Replace your password here"
            }
            url project.hasProperty('nexusRepositoryUrl') ? project.getProperties().get('nexusRepositoryUrl') : project.pom_distribution_repo_url
        }
    }
}*/


apply plugin: 'maven'
apply plugin: 'signing'

signing {
    sign configurations.archives
}




uploadArchives {
    configuration = configurations.archives
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: project.pom_distribution_repo_url) {
                authentication(userName: project.username, password: project.password)
            }
            snapshotRepository(url: project.pom_distribution_snapshotRepo_url) {
                authentication(userName: project.username, password: project.password)
            }

            pom.project {
                name project.pom_name
                packaging project.pom_packaging
                groupId project.pom_groupId
                artifactId project.pom_artifactId
                version project.pom_version
                //artifact("${project.buildDir}/outputs/aar/${project.name}-release.aar")
                description project.pom_description
                url project.pom_url
                scm {
                    connection 'scm:git:git@github.com:appnexus/mobile-sdk-android.git'
                    developerConnection 'scm:git:git@github.com:appnexus/mobile-sdk-android.git'
                    url 'git@github.com:appnexus/mobile-sdk-android.git'
                }
                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name 'AppNexus Mobile Team'
                        email 'sdk@appnexus.com'
                        organizationUrl 'http://www.appnexus.com'
                    }
                }
            }
        }
    }
}
